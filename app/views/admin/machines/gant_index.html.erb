  <h1 class="px-4 py-2 text-3xl font-bold text-gray-700 mt-6 mb-6 text-center">工程ごとの機屋一覧</h1>

    <style>
      /* テーブル全体の背景色を白に設定 */
      .gantt-wrap {
        display: flex;
        align-items: flex-start;
        background-color: #ffffff; /* 背景色を白に設定 */
      }

      /* 内部のテーブルの背景を白に設定 */
      .gantt-wrap table {
        background-color: #ffffff; /* テーブル全体の背景色 */
        border-collapse: collapse; /* 境界線の余白を削除 */
      }

        /* クラスに応じたスタイルを設定 */
      g.bar-wrapper.class-a rect.bar-progress {
        fill: #3498db !important; /* 青 */
      }

      g.bar-wrapper.class-b rect.bar-progress {
        fill: #2ecc71 !important; /* 緑 */
      }
    </style>

  <div class='gantt-wrap flex min-w-[800px]'>
    <table class="flex-none w-1/3 border border-gray-300" style='border-spacing:0px !important;'>
      <thead class="pb-20">
        <tr class='border border-gray-300'>
          <th class="text-xs pt-6 pb-4">品番</th>
          <th class="text-xs pt-6 pb-4">会社</th>
          <th class="text-xs pt-6 pb-4">織機</th>
          <th class="text-xs pt-6 pb-4">ステータス</th>
        </tr>
      </thead>
      <tbody>
        <% JSON.parse(@orders).group_by { |order| order["custom_index"] }.each do |order_id, grouped_orders| %>
          <tr class='border border-gray-300' style="height:186.76px; box-sizing: content-box;">
            <td class='text-xs border border-gray-300' style="height:186.76px; box-sizing: content-box;"><%= grouped_orders.first["product_number"] %></td>
            <td class='text-xs border border-gray-300' style="height:186.76px; box-sizing: content-box;"><%= grouped_orders.first["company"] %></td>
            <td class='text-xs border border-gray-300' style="height:186.76px; box-sizing: content-box;">
              <%= grouped_orders.map { |order| order["machine"] }.uniq.join(", ") %>
            </td>
            <td class='text-xs border border-gray-300' style="height:186.76px; box-sizing: content-box;">
              <% work_process = WorkProcess.current_work_process %>
              <%= work_process&.work_process_status&.name || "未設定" %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>

    <svg id="gantt" class="flex-grow"></svg>
  </div>

  <script>
    window.addEventListener("turbo:load", function () {
      const orders = <%= raw @orders %>
        console.log(orders)

      const gantt = new Gantt("#gantt", orders, {
        view_mode: 'Month',
        header_height: 45,
        bar_height: 20,
        // column_width: 30,
        // padding: 60
      });

      //
      // 横軸の月ラベルを日本語に変更
      setTimeout(function () {
        console.log('timeout proc');
        const labels = document.querySelectorAll(".lower-text");
        const monthMapping = {
          "January": "1月",
          "February": "2月",
          "March": "3月",
          "April": "4月",
          "May": "5月",
          "June": "6月",
          "July": "7月",
          "August": "8月",
          "September": "9月",
          "October": "10月",
          "November": "11月",
          "December": "12月",
        };

        labels.forEach((label) => {
          const text = label.textContent.trim();
          if (monthMapping[text]) {
            label.textContent = monthMapping[text];
          }
        });
      }, 500); // 描画が完了するまで待機

      const popups = document.querySelectorAll(".bar-wrapper");
      // popups.addEventListener("click", setPopup);

      // popup内の月ラベルを日本語に変更
      popups.forEach((popup) => {
        popup.addEventListener("click", function () {
          setTimeout(replacePopupDate, 100);
        });
      });

      function replacePopupDate() {
        console.log('timeout proc2');
        const popupSubtitles = document.querySelectorAll(".subtitle");
        console.log(popupSubtitles);
        const monthMapping = {
          "January": "1 /",
          "February": "2 /",
          "March": "3 /",
          "April": "4/",
          "May": "5/",
          "June": "6/",
          "July": "7/",
          "August": "8/",
          "September": "9/",
          "October": "10 /",
          "November": "11 /",
          "December": "12 /",
        };

        popupSubtitles.forEach((subtitle) => {
          let text = subtitle.textContent.trim(); // テキスト内容を取得
          console.log("Before Translation:", text);

          // 月名を日本語に置き換える
          for (const [english, japanese] of Object.entries(monthMapping)) {
            text = text.replace(new RegExp(english, "g"), japanese); // すべての一致箇所を置換
          }

          subtitle.textContent = text; // 翻訳後のテキストを設定
          console.log("After Translation:", subtitle.textContent);
        });
      }
    })
  </script>
