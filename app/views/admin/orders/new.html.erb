<% content_for :head do %>
  <meta name="turbo-visit-control" content="reload">
<% end %>

<h1 class="px-4 py-2 text-3xl font-bold text-gray-800 mt-6 mb-6 text-center">発注フォーム</h1>

<%# フォームが表示される前にエラーメッセージを表示するためform_withの前に書く %>
<% if @order.errors.any? %>
<%# Railsがデフォルトで用意しているエラー用のスタイル（CSS）を適用 %>
<div id="error_explanation">
  <h2><%= "#{@order.errors.count} 件のエラーが発生しました" %></h2>
  <ul>
    <% @order.errors.full_messages.each do |message| %>
    <li><%= message %></li>
    <% end %>
  </ul>
</div>
<% end %>

<%= form_with model: @order, url: admin_orders_path, local: true do |f| %>
<section class="px-24">
  <p class="pb-4 text-rose-500 font-semibold">発注フォームはすべて必須項目になります。</p>
  <div class="px-4 py-2 overflow-x-auto mb-6 whitespace-nowrap">
    <table class="w-full max-w-sm">
      <div class="md:flex md:items-center mb-6">
        <div class="md:w-1/3 py-2">
          <label class="w-1/3 px-4 py-2 text-gray-700 font-bold text-center">
            <%= f.label :name, "会社名" %>
          </label>
        </div>
        <div class="md:w-2/3">
          <%= f.collection_select :company_id, @companies, :id, :name, { prompt: "会社を選択してください" }, { class: "block w-full rounded-md bg-white px-4 py-2 text-base text-gray-900 border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm appearance-none", required: true }  %>
        </div>
      </div>
      <div class="md:flex md:items-center mb-6">
        <div class="md:w-1/3 py-2">
          <label class="w-1/3 px-4 py-2 text-gray-700 font-bold text-center">
            <%= f.label :product_number_id, "品番" %>
          </label>
        </div>
        <div class="md:w-2/3">
          <%= f.collection_select :product_number_id, ProductNumber.all, :id, :number, { prompt: "品番を選択してください" }, { class: "block w-full rounded-md bg-white px-4 py-2 text-base text-gray-900 border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm appearance-none", required: true } %>
        </div>
      </div>
      <div class="md:flex md:items-center mb-6">
        <div class="md:w-1/3 py-2">
          <label class="w-1/3 px-4 py-2 text-gray-700 font-bold text-center">
            <%= f.label :color_number_id, "色番" %>
          </label>
        </div>
        <div class="md:w-2/3">
          <%= f.collection_select :color_number_id, ColorNumber.all, :id, :color_code, { prompt: "色番を選択してください" }, { class: "block w-full rounded-md bg-white px-4 py-2 text-base text-gray-900 border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm appearance-none", required: true }  %>
        </div>
      </div>

      <!-- RailsからReactに渡すための初期データだけを埋め込む -->
      <div id="react-root" data-turbo="false"></div>

      <div class="md:flex md:items-center mb-6">
        <div class="md:w-1/3 py-2">
          <label class="w-1/3 px-4 py-2 text-gray-700 font-bold text-center">
            <%= f.label :machine_type, "機械のタイプ" %>
          </label>
        </div>
        <div class="md:w-2/3">
          <%= select_tag "order[work_processes][process_estimate][machine_type_id]",
                          options_from_collection_for_select(MachineType.all, :id, :name), { prompt: "織機のタイプを選択してください", required: true } %>
        </div>
      </div>
      <div class="md:flex md:items-center mb-6">
        <div class="md:w-1/3 py-2">
          <label class="w-1/3 px-4 py-2 text-gray-700 font-bold text-center">
            <%= f.label :start_date, "作業開始日" %>
          </label>
        </div>
        <div class="md:w-2/3">
          <%= text_field_tag 'order[work_processes][start_date]',
                          nil,
                          placeholder: "作業開始日を選択してください",
                          type: :date,
                          required: true,
                          class: "block w-full rounded-md bg-white px-4 py-2 text-base text-gray-900 border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm appearance-none" %>
        </div>
      </div>
    </table>
  </div>
</section>

<!-- 提出ボタン -->
<section class="mb-12">
  <div class="flex justify-center space-x-2">
    <div class="px-2 py-2">
      <%= f.submit "発注", class: "inline-block px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-700" %>
    </div>
    <div class="px-2 py-2">
      <%= link_to "戻る", admin_orders_path, class: "inline-block px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-700" %>
    </div>
  </div>
</section>
<% end %>

<script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<script type="text/babel">
  const { useState, useEffect } = React;

  // 各入力フィールドの値とバリデーション状態を管理するステートの定義
  function OrderForm() {
    const [rollCount, setRollCount] = useState('');
    const [quantity, setQuantity] = useState('');

    //エラーメッセージを管理するステートの定義
    const [errors, setErrors] = useState({
        // キーと初期値の指定
        rollCount: "",
        quantity: "",
    });

    // フォーム全体が送信可能かどうかを管理するステート
    // validation管理ステートの定義
    const [isFormValid, setIsFormValid] = useState(false);

    // HTML内に埋め込まれたデータを取得してステートにセット
    // useEffectフックの宣言
    // useEffect(() => {
    //     document.querySelector('input[name="order[roll_count]"]').value = rollCount;
    //     document.querySelector('input[name="order[quantity]"]').value = quantity;
    // }, [rollCount, quantity]);


  // 入力内容のチェックをするイベントハンドラ関数を定義して、その中で更新用関数を呼び出す
    // 反数用のイベントハンドラ
    const handleRollCountChange = (e) => {
        const value = e.target.value;

        // 入力値が数字かつ4桁以内の場合のみステートを更新
        if (/^\d{0,4}$/.test(value)) {
            setRollCount(value); // ステート更新
            setErrors((prevErrors) => ({ ...prevErrors, rollCount: "" })); // エラーをクリア
        } else {
            // 5桁目が入力されたらエラーメッセージをセット
            setErrors((prevErrors) => ({
            ...prevErrors,
            rollCount: "最大4桁までしか入力できません。",
            }));
        }
        };

    // 数量用のイベントハンドラ
    const handleQuantityChange = (e) => {
        const value = e.target.value;

        // 入力値が数字かつ4桁以内の場合のみステートを更新
        if (/^\d{0,4}$/.test(value)) {
            setQuantity(value); // ステート更新
            setErrors((prevErrors) => ({ ...prevErrors, quantity: "" })); // エラーをクリア
        } else {
            // 5桁目が入力されたらエラーメッセージをセット
            setErrors((prevErrors) => ({
            ...prevErrors,
            quantity: "最大4桁までしか入力できません。",
            }));
        }
        };


        // エラーメッセージ更新関数setErrorsの呼び出し
        // setErrors(newErrors);
        // validation状況を更新する関数の呼び出し
        // isOK = Object.keys(newErrors).length === 0;
        // setIsFormValid(isOK);


    return (
      <div>
        <div className="md:flex md:items-center mb-6">
          <div className="md:w-1/3 py-2">
            <label className="w-1/3 px-4 py-2 text-gray-700 font-bold text-center">
              反数
            </label>
          </div>
          <div className="md:w-2/3">
            <input
                type="text"
                value={rollCount}
                // setstateで定義したキーrollCountを errorKey に渡す
                onChange={(e) => handleRollCountChange(e)}
                placeholder="反数を入力してください"
                required
                className="block w-full rounded-md bg-white px-4 py-2 text-base text-gray-900 border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm appearance-none"
            />
            {errors.rollCount && (
              <p className="text-red-500">{errors.rollCount}</p>
            )}
          </div>
        </div>

        <div className="md:flex md:items-center mb-6">
          <div className="md:w-1/3 py-2">
            <label className="w-1/3 px-4 py-2 text-gray-700 font-bold text-center">
              数量
            </label>
          </div>
          <div className="md:w-2/3">
            <input
              type="text"
              value={quantity}
              onChange={(e) => handleQuantityChange(e)}
              placeholder="数量を入力してください"
              required
              className="block w-full rounded-md bg-white px-4 py-2 text-base text-gray-900 border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm appearance-none"
            />
            {errors.quantity && (
                <p className="text-red-500">{errors.quantity}</p>
            )}
          </div>
        </div>
        <input type="hidden" name="order[roll_count]" value={rollCount} />
        <input type="hidden" name="order[quantity]" value={quantity} />
      </div>
    );
  };

  document.addEventListener("turbo:load", () => {
    const root = document.getElementById("react-root");
    if (root) {
      ReactDOM.render(<OrderForm />, root);
    }
  });
</script>

